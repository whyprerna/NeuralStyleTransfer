import streamlit as st
from PIL import Image
import torch

from utils.image_processing import load_image, process_image, imshow
from style_transfer import run_style_transfer

# Add custom CSS using Streamlit Markdown
def add_custom_css():
    st.markdown("""
    <style>
    .reportview-container {
        background-color: #f5f5dc; /* Beige color */
    }
    .css-18e3th9 {
        color: #4b4b4b; /* Darker text color for headings */
    }
    .css-1v0mbdj {
        color: #333; /* Slightly darker text color for Markdown */
    }
    .bold {
        font-weight: bold;
    }
    </style>
    """, unsafe_allow_html=True)

# Home Section
def home_section():
    st.title("Neural Style Transfer")
    st.write("""
    Welcome to the Neural Style Transfer application!
    
    This application allows you to create beautiful artistic images by combining the content of one image with the style of another image. 
    You can use three different models (VGG19, AlexNet, ResNet50) to perform the style transfer and see the differences in the generated images.
    """)
    st.markdown("""
    **Key Features:**
    - Upload content and style images.
    - Select one or more models for style transfer.
    - View and download the resulting images.
    """, unsafe_allow_html=True)

# Description Section
def description_section():
    st.header("Description")
    st.write("""
    Neural Style Transfer (NST) is a technique that uses deep learning to blend the content of one 
    image with the style of another. This app leverages state-of-the-art pre-trained models to 
    achieve this effect. You can select which model to use from the dropdown menu and see how 
    each model interprets the style transfer process.
    """)
    st.markdown("""
    **Instructions:**
    1. Navigate to the "Create Your Own Artistic Image" section.
    2. Upload a content image and a style image.
    3. Select the model you want to use for style transfer.
    4. Click on "Generate Style Transfer" to see the output images generated by the selected models.
    5. Download the generated images if you like them.

    **How to Use:**
    1. **Upload Images**: Click on the file upload buttons to select your content image and style image. The content image is the one you want to apply the style to, and the style image is the one you want to transfer the artistic style from.
    2. **Choose Models**: Use the multiselect menu to choose one or more of the available models:
        - **VGG19**: Known for its detailed feature extraction and good performance on style transfer tasks.
        - **AlexNet**: A less complex model compared to VGG19, which may provide different artistic effects.
        - **ResNet50**: Uses residual connections to handle deeper networks, which can result in unique style transfer outcomes.
    3. **Generate Output**: After selecting the models, click the "Generate Style Transfer" button. The app will process the images and generate the style-transferred outputs using the selected models.

    **Notes:**
    - The processing time may vary depending on the models selected and the size of the images.
    - You can view and download the results for each selected model separately.
    - The images will be displayed with the selected model's name.
    """, unsafe_allow_html=True)

# Limitations Section
def limitations_section():
    st.header("Limitations")
    st.write("""
        - **Image Size Requirement**: Both content and style images must have the same dimensions for the style transfer to work properly. If the images have different sizes, you may need to resize them before uploading.
        - **ResNet50 Model Issue**: The ResNet50 model may sometimes encounter issues due to normalization and matrix multiplication. If you experience problems with this model, you might want to try using VGG19 or AlexNet instead.
    """)

# About Us Section
def about_us_section():
    st.header(" Contact")
    st.write("""
        **Contact Information:**

        - **Name**: Prerna Pattanaik
        - **Email**: [ucse21061@stu.xim.edu.in](mailto:ucse21061@stu.xim.edu.in)
        - **GitHub**: [github.com/whyprerna](https://github.com/whyprerna)
        - **LinkedIn**: [linkedin.com/in/pattanaikprerna](https://www.linkedin.com/in/pattanaikprerna/)
    """)

# Create Your Own Artistic Image Section
def create_artistic_image_section():
    st.header("Create Your Own Artistic Image")

    content_file = st.file_uploader("Choose a content image", type=["jpg", "jpeg", "png"])
    style_file = st.file_uploader("Choose a style image", type=["jpg", "jpeg", "png"])

    model_choices = st.multiselect(
        "Choose the models you want to use for style transfer",
        ["VGG19", "AlexNet", "ResNet50"]
    )

    if content_file and style_file:
        content_img = load_image(content_file)
        style_img = load_image(style_file)

        st.image(content_img, caption="Content Image", use_column_width=True)
        st.image(style_img, caption="Style Image", use_column_width=True)

        if st.button("Generate Style Transfer"):
            imsize = 512 if torch.cuda.is_available() else 128

            if "VGG19" in model_choices:
                with st.spinner("Generating VGG19 Style Transfer..."):
                    vgg_output = run_style_transfer('vgg19', 
                                                    process_image(content_img, imsize), 
                                                    process_image(style_img, imsize), 
                                                    process_image(content_img, imsize).clone())
                    st.image(imshow(vgg_output), caption="VGG19 Output", use_column_width=True)

            if "AlexNet" in model_choices:
                with st.spinner("Generating AlexNet Style Transfer..."):
                    alexnet_output = run_style_transfer('alexnet', 
                                                        process_image(content_img, imsize), 
                                                        process_image(style_img, imsize), 
                                                        process_image(content_img, imsize).clone())
                    st.image(imshow(alexnet_output), caption="AlexNet Output", use_column_width=True)

            if "ResNet50" in model_choices:
                with st.spinner("Generating ResNet50 Style Transfer..."):
                    resnet_output = run_style_transfer('resnet50', 
                                                       process_image(content_img, imsize), 
                                                       process_image(style_img, imsize), 
                                                       process_image(content_img, imsize).clone())
                    st.image(imshow(resnet_output), caption="ResNet50 Output", use_column_width=True)

# Main Application
def main():
    add_custom_css()  # Add custom CSS
    st.sidebar.title("Navigation")
    options = ["Home", "Description", "Create Your Own Artistic Image", "Limitations", "Contact"]
    choice = st.sidebar.radio("Go to", options)

    if choice == "Home":
        home_section()
    elif choice == "Description":
        description_section()
    elif choice == "Limitations":
        limitations_section()
    elif choice == "Contact":
        about_us_section()
    elif choice == "Create Your Own Artistic Image":
        create_artistic_image_section()

if __name__ == "__main__":
    main()
